import ("refl.um")

type Direction = enum {
    up
    down
    left
    right
}

type Vf2 = struct {
    x: real
    y: real
}

type Rect = struct {
    pos: Vf2
    size: Vf2
}

type Player = struct {
    dir: Direction
    rect: Rect
    deck: [3]int
    inventory: []int
    enemies: map[str]^int
    nextTarget: ^Player
    update: fn (t: real, a: ..any)
}

fn (p: ^Player) move() {

}

fn main() {
    t, ok := refl::mk(typeptr(Player))
    printf("%s\n", refl::formatType(t))
    printf("%v\n", t.location())
    printf("%v\n", t.alignment())
    printf("%v\n", refl::Struct(t).fieldOffset("deck"))
    t2, ok := refl::mk(typeptr(refl::Type))
    printf("%s\n", refl::formatType(t2))
}